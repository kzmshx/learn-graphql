scalar DateTime

type User {
  githubUser: ID!
  name: String
  avatar: String
  postedPhotos: [Photo]!
  inPhotos: [Photo]!
}

type AuthPayload {
  token: String!
  user: User!
}

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

type Photo {
  id: ID!
  url: String!
  name: String!
  category: PhotoCategory!
  description: String
  postedBy: User!
  taggedUsers: [User]!
  createdAt: DateTime!
}

type Query {
  totalPhotos: Int!
  allPhotos(after: DateTime): [Photo!]!
  totalUsers: Int!
  allUsers: [User!]!
}

input PostPhotoInput {
  name: String!
  category: PhotoCategory = PORTRAIT
  description: String
}

type Mutation {
  githubAuth(code: String!): AuthPayload!
  postPhoto(input: PostPhotoInput!): Photo!
}
